// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `ScrollView-Background`.
    static let scrollViewBackground = ImageResource(bundle: _R.hostingBundle, name: "ScrollView-Background")
    /// Image `ScrollView-Sample1`.
    static let scrollViewSample1 = ImageResource(bundle: _R.hostingBundle, name: "ScrollView-Sample1")
    /// Image `ScrollView-Sample2`.
    static let scrollViewSample2 = ImageResource(bundle: _R.hostingBundle, name: "ScrollView-Sample2")
    /// Image `ScrollView-Sample3`.
    static let scrollViewSample3 = ImageResource(bundle: _R.hostingBundle, name: "ScrollView-Sample3")
    
    /// `UIImage(named: "ScrollView-Background", bundle: ..., traitCollection: ...)`
    static func scrollViewBackground(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.scrollViewBackground, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ScrollView-Sample1", bundle: ..., traitCollection: ...)`
    static func scrollViewSample1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.scrollViewSample1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ScrollView-Sample2", bundle: ..., traitCollection: ...)`
    static func scrollViewSample2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.scrollViewSample2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ScrollView-Sample3", bundle: ..., traitCollection: ...)`
    static func scrollViewSample3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.scrollViewSample3, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `MainCell`.
    static let mainCell = _R.nib._MainCell()
    /// Nib `ScrollHeaderView`.
    static let scrollHeaderView = _R.nib._ScrollHeaderView()
    
    /// `UINib(name: "MainCell", bundle: ...)`
    static func mainCell(_: Void) -> UINib {
      return UINib(resource: R.nib.mainCell)
    }
    
    /// `UINib(name: "ScrollHeaderView", bundle: ...)`
    static func scrollHeaderView(_: Void) -> UINib {
      return UINib(resource: R.nib.scrollHeaderView)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `ScrollViewSample`.
    static let scrollViewSample = _R.storyboard.scrollViewSample()
    /// Storyboard `UITabBarSample`.
    static let uITabBarSample = _R.storyboard.uITabBarSample()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "ScrollViewSample", bundle: ...)`
    static func scrollViewSample(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.scrollViewSample)
    }
    
    /// `UIStoryboard(name: "UITabBarSample", bundle: ...)`
    static func uITabBarSample(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.uITabBarSample)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "jp.co.ymurata.InteractionSample") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _MainCell: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "MainCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MainCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? MainCell
      }
      
      private init() {}
    }
    
    struct _ScrollHeaderView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "ScrollHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try scrollViewSample.validate()
      try uITabBarSample.validate()
      try main.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainNavigationController
      
      let bundle = _R.hostingBundle
      let mainNavigationController = StoryboardViewControllerResource<MainNavigationController>(identifier: "MainNavigationController")
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"
      
      func mainNavigationController(_: Void) -> MainNavigationController? {
        return UIStoryboard(resource: self).instantiateViewController(mainNavigationController)
      }
      
      func mainViewController(_: Void) -> MainViewController? {
        return UIStoryboard(resource: self).instantiateViewController(mainViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().mainNavigationController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'mainNavigationController' could not be loaded from storyboard 'Main' as 'MainNavigationController'.") }
        if _R.storyboard.main().mainViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }
      
      private init() {}
    }
    
    struct scrollViewSample: StoryboardResourceType, Rswift.Validatable {
      let bundle = _R.hostingBundle
      let name = "ScrollViewSample"
      let scrollZoomViewController = StoryboardViewControllerResource<ScrollZoomViewController>(identifier: "ScrollZoomViewController")
      let slideScrollSampleViewController = StoryboardViewControllerResource<SlideScrollSampleViewController>(identifier: "SlideScrollSampleViewController")
      
      func scrollZoomViewController(_: Void) -> ScrollZoomViewController? {
        return UIStoryboard(resource: self).instantiateViewController(scrollZoomViewController)
      }
      
      func slideScrollSampleViewController(_: Void) -> SlideScrollSampleViewController? {
        return UIStoryboard(resource: self).instantiateViewController(slideScrollSampleViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "ScrollView-Background") == nil { throw ValidationError(description: "[R.swift] Image named 'ScrollView-Background' is used in storyboard 'ScrollViewSample', but couldn't be loaded.") }
        if _R.storyboard.scrollViewSample().scrollZoomViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'scrollZoomViewController' could not be loaded from storyboard 'ScrollViewSample' as 'ScrollZoomViewController'.") }
        if _R.storyboard.scrollViewSample().slideScrollSampleViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'slideScrollSampleViewController' could not be loaded from storyboard 'ScrollViewSample' as 'SlideScrollSampleViewController'.") }
      }
      
      private init() {}
    }
    
    struct uITabBarSample: StoryboardResourceType, Rswift.Validatable {
      let bundle = _R.hostingBundle
      let name = "UITabBarSample"
      let pushHideTabBarController = StoryboardViewControllerResource<PushHideTabBarController>(identifier: "PushHideTabBarController")
      let uITabBarHideNavigationController = StoryboardViewControllerResource<UITabBarHideNavigationController>(identifier: "UITabBarHideNavigationController")
      let uITabBarSample1ViewController = StoryboardViewControllerResource<UITabBarSample1ViewController>(identifier: "UITabBarSample1ViewController")
      
      func pushHideTabBarController(_: Void) -> PushHideTabBarController? {
        return UIStoryboard(resource: self).instantiateViewController(pushHideTabBarController)
      }
      
      func uITabBarHideNavigationController(_: Void) -> UITabBarHideNavigationController? {
        return UIStoryboard(resource: self).instantiateViewController(uITabBarHideNavigationController)
      }
      
      func uITabBarSample1ViewController(_: Void) -> UITabBarSample1ViewController? {
        return UIStoryboard(resource: self).instantiateViewController(uITabBarSample1ViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.uITabBarSample().pushHideTabBarController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'pushHideTabBarController' could not be loaded from storyboard 'UITabBarSample' as 'PushHideTabBarController'.") }
        if _R.storyboard.uITabBarSample().uITabBarHideNavigationController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'uITabBarHideNavigationController' could not be loaded from storyboard 'UITabBarSample' as 'UITabBarHideNavigationController'.") }
        if _R.storyboard.uITabBarSample().uITabBarSample1ViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'uITabBarSample1ViewController' could not be loaded from storyboard 'UITabBarSample' as 'UITabBarSample1ViewController'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}